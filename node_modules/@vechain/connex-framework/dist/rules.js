"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isDecString(val) {
    return typeof val === 'string' && /^[0-9]+$/.test(val);
}
exports.isDecString = isDecString;
function isHexString(val) {
    return typeof val === 'string' && /^0x[0-9a-f]+$/i.test(val);
}
exports.isHexString = isHexString;
function isHexBytes(val, n) {
    if (typeof val !== 'string' || !/^0x[0-9a-f]*$/i.test(val)) {
        return false;
    }
    return n ? val.length === n * 2 + 2 : val.length % 2 === 0;
}
exports.isHexBytes = isHexBytes;
function isUInt(val, bit) {
    if (val < 0 || !Number.isInteger(val)) {
        return false;
    }
    return bit ? val < Math.pow(2, bit) : true;
}
exports.isUInt = isUInt;
function isBigInt(v) {
    return typeof v === 'string' ?
        (isDecString(v) || isHexString(v)) :
        isUInt(v, 0);
}
exports.isBigInt = isBigInt;
class BadParameter extends Error {
    constructor(msg) {
        super(msg);
    }
}
exports.BadParameter = BadParameter;
BadParameter.prototype.name = 'BadParameter';
function ensure(b, msg) {
    if (!b) {
        throw new BadParameter(msg);
    }
}
exports.ensure = ensure;
const V = require("validator-ts");
function test(value, scheme, context) {
    try {
        return V.validate(value, scheme, context);
    }
    catch (err) {
        if (err instanceof V.ValidationError) {
            throw new BadParameter(err.message);
        }
        throw err;
    }
}
exports.test = test;
// rules
function bytes(v) {
    return isHexBytes(v) ? '' : 'expected bytes in hex string';
}
exports.bytes = bytes;
function bytes8(v) {
    return isHexBytes(v, 8) ? '' : 'expected bytes8';
}
exports.bytes8 = bytes8;
function bytes32(v) {
    return isHexBytes(v, 32) ? '' : 'expected bytes32';
}
exports.bytes32 = bytes32;
function uint8(v) {
    return isUInt(v, 8) ? '' : 'expected 8-bit unsigned integer';
}
exports.uint8 = uint8;
function uint32(v) {
    return isUInt(v, 32) ? '' : 'expected 32-bit unsigned integer';
}
exports.uint32 = uint32;
function uint64(v) {
    return isUInt(v, 64) ? '' : 'expected 64-bit unsigned integer';
}
exports.uint64 = uint64;
function bool(v) {
    return typeof v === 'boolean' ? '' : 'expected boolean';
}
exports.bool = bool;
function bigInt(v) {
    return isBigInt(v) ? '' : 'expected unsigned integer in number or string';
}
exports.bigInt = bigInt;
function hexString(v) {
    return isHexString(v) ? '' : 'expected integer in hex string';
}
exports.hexString = hexString;
function address(v) {
    return isHexBytes(v, 20) ? '' : 'expected address';
}
exports.address = address;
function string(v) {
    return typeof v === 'string' ? '' : 'expected string';
}
exports.string = string;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcnVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFnQixXQUFXLENBQUMsR0FBVztJQUNuQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFELENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxHQUFXO0lBQ25DLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUNoRSxDQUFDO0FBRkQsa0NBRUM7QUFFRCxTQUFnQixVQUFVLENBQUMsR0FBVyxFQUFFLENBQVU7SUFDOUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDeEQsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDOUQsQ0FBQztBQUxELGdDQUtDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUFXO0lBQzNDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbkMsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUNELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBQSxDQUFDLEVBQUksR0FBRyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUN0QyxDQUFDO0FBTEQsd0JBS0M7QUFFRCxTQUFnQixRQUFRLENBQUMs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