"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const account_visitor_1 = require("./account-visitor");
const block_visitor_1 = require("./block-visitor");
const tx_visitor_1 = require("./tx-visitor");
const filter_1 = require("./filter");
const head_tracker_1 = require("./head-tracker");
const explainer_1 = require("./explainer");
const R = require("./rules");
function newThor(driver) {
    const headTracker = head_tracker_1.newHeadTracker(driver);
    const ctx = {
        driver,
        get trackedHead() { return headTracker.head; }
    };
    const genesis = JSON.parse(JSON.stringify(driver.genesis));
    return {
        get genesis() { return genesis; },
        get status() {
            return {
                head: headTracker.head,
                progress: headTracker.progress
            };
        },
        ticker: () => headTracker.ticker(),
        account: addr => {
            addr = R.test(addr, R.address, 'arg0').toLowerCase();
            return account_visitor_1.newAccountVisitor(ctx, addr);
        },
        block: revision => {
            if (typeof revision === 'undefined') {
                revision = ctx.trackedHead.id;
            }
            else {
                R.ensure(typeof revision === 'string' ? R.isHexBytes(revision, 32) : R.isUInt(revision, 32), 'arg0: expected bytes32 or unsigned 32-bit integer');
            }
            return block_visitor_1.newBlockVisitor(ctx, typeof revision === 'string' ? revision.toLowerCase() : revision);
        },
        transaction: id => {
            id = R.test(id, R.bytes32, 'arg0').toLowerCase();
            return tx_visitor_1.newTxVisitor(ctx, id);
        },
        filter: kind => {
            R.ensure(kind === 'event' || kind === 'transfer', `arg0: expected 'event' or 'transfer'`);
            return filter_1.newFilter(ctx, kind);
        },
        explain: () => explainer_1.newExplainer(ctx)
    };
}
exports.newThor = newThor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90aG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdURBQXFEO0FBQ3JELG1EQUFpRDtBQUNqRCw2Q0FBMkM7QUFDM0MscUNBQW9DO0FBQ3BDLGlEQUErQztBQUMvQywyQ0FBMEM7QUFDMUMsNkJBQTRCO0FBRzVCLFNBQWdCLE9BQU8sQ0FBQyxNQUF1QjtJQUMzQyxNQUFNLFdBQVcsR0FBRyw2QkFBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTFDLE1BQU0sR0FBRyxHQUFZO1FBQ2pCLE1BQU07UUFDTixJQUFJLFdBQVcsS0FBSyxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDO0tBQ2hELENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7SUFDMUQsT0FBTztRQUNILElBQUksT0FBTyxLQUFLLE9BQU8sT0FBTyxDQUFBLENBQUMsQ0FBQztRQUNoQyxJQUFJLE1BQU07WUFDTixPQUFPO2dCQUNILElBQUksRUFBRSxXQUFXLENBQUMsSUFBSTtnQkFDdEIsUUFBUSxFQUFFLFdBQVcsQ0FBQyxRQUFRO2FBQ2pDLENBQUE7UUFDTCxDQUFDO1FBQ0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7UUFDbEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1osSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDcEQsT0FBTyxtQ0FBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDdkMsQ0FBQztRQUNELEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRTtZQUNkLElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO2dCQUNqQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUE7YUFDaEM7aUJBQU07Z0JBQ0gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFDdkYsbURBQW1ELENBQUMsQ0FBQTthQUMzRDtZQUNELE9BQU8sK0JBQWUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2pHLENBQUM7UUFDRCxXQUFXLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDZCxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUNoRCxPQUFPLHlCQUFZLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ2hDLENBQUM7UUFDRCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDWCxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksSUFBSSxLQUFLLFVBQVUsRUFDNUMsc0NBQXNDLENBQUMsQ0FBQTtZQUMzQyxPQUFPLGtCQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQy9CLENBQUM7UUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsd0JBQVksQ0FBQyxHQUFHLENBQUM7S0FDbkMsQ0FBQTtBQUNMLENBQUM7QUExQ0QsMEJBMENDIn0=