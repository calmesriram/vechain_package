"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const R = require("./rules");
const V = require("validator-ts");
const MAX_LIMIT = 256;
function newFilter(ctx, kind) {
    const filterBody = {
        range: {
            unit: 'block',
            from: 0,
            to: Math.pow(2, 32) - 1
        },
        options: {
            offset: 0,
            limit: 10
        },
        criteriaSet: [],
        order: 'asc'
    };
    return {
        criteria(set) {
            if (kind === 'event') {
                R.test(set, [eventCriteriaScheme], 'arg0');
                filterBody.criteriaSet = set
                    .map(c => {
                    return {
                        address: c.address ? c.address.toLowerCase() : undefined,
                        topic0: c.topic0 ? c.topic0.toLowerCase() : undefined,
                        topic1: c.topic1 ? c.topic1.toLowerCase() : undefined,
                        topic2: c.topic2 ? c.topic2.toLowerCase() : undefined,
                        topic3: c.topic3 ? c.topic3.toLowerCase() : undefined,
                        topic4: c.topic4 ? c.topic4.toLowerCase() : undefined
                    };
                });
            }
            else {
                R.test(set, [transferCriteriaScheme], 'arg0');
                filterBody.criteriaSet = set
                    .map(c => {
                    return {
                        txOrigin: c.txOrigin ? c.txOrigin.toLowerCase() : undefined,
                        sender: c.sender ? c.sender.toLowerCase() : undefined,
                        recipient: c.recipient ? c.recipient.toLowerCase() : undefined
                    };
                });
            }
            return this;
        },
        range(range) {
            R.test(range, {
                unit: v => (v === 'block' || v === 'time') ? '' : `expected 'block' or 'time'`,
                from: R.uint64,
                to: R.uint64
            }, 'arg0');
            R.ensure(range.from <= range.to, 'arg0.from: expected <= arg0.to');
            filterBody.range = Object.assign({}, range);
            return this;
        },
        order(order) {
            R.ensure(order === 'asc' || order === 'desc', `arg0: expected 'asc' or 'desc'`);
            filterBody.order = order;
            return this;
        },
        apply(offset, limit) {
            R.test(offset, R.uint64, 'arg0');
            R.ensure(limit >= 0 && limit <= MAX_LIMIT && Number.isInteger(limit), `arg1: expected unsigned integer <= ${MAX_LIMIT}`);
            filterBody.options.offset = offset;
            filterBody.options.limit = limit;
            if (kind === 'transfer') {
                return ctx.driver.filterTransferLogs(filterBody);
            }
            else {
                return ctx.driver.filterEventLogs(filterBody);
            }
        }
    };
}
exports.newFilter = newFilter;
const eventCriteriaScheme = {
    address: V.optional(R.address),
    topic0: V.optional(R.bytes32),
    topic1: V.optional(R.bytes32),
    topic2: V.optional(R.bytes32),
    topic3: V.optional(R.bytes32),
    topic4: V.optional(R.bytes32)
};
const transferCriteriaScheme = {
    sender: V.optional(R.address),
    recipient: V.optional(R.address),
    txOrigin: V.optional(R.address)
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE0QjtBQUM1QixrQ0FBaUM7QUFFakMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFBO0FBRXJCLFNBQWdCLFNBQVMsQ0FDckIsR0FBWSxFQUNaLElBQU87SUFHUCxNQUFNLFVBQVUsR0FBRztRQUNmLEtBQUssRUFBRTtZQUNILElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLENBQUM7WUFDUCxFQUFFLEVBQUUsU0FBQSxDQUFDLEVBQUksRUFBRSxDQUFBLEdBQUcsQ0FBQztTQUNsQjtRQUNELE9BQU8sRUFBRTtZQUNMLE1BQU0sRUFBRSxDQUFDO1lBQ1QsS0FBSyxFQUFFLEVBQUU7U0FDWjtRQUNELFdBQVcsRUFBRSxFQUF1RTtRQUNwRixLQUFLLEVBQUUsS0FBSztLQUNmLENBQUE7SUFFRCxPQUFPO1FBQ0gsUUFBUSxDQUFDLEdBQUc7WUFDUixJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBbUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7Z0JBQzFFLFVBQVUsQ0FBQyxXQUFXLEdBQUksR0FBb0M7cUJBQ3pELEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDTCxPQUFPO3dCQUNILE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO3dCQUN4RCxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUzt3QkFDckQsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FB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