"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const promint_1 = require("./promint");
const cache_1 = require("./cache");
const blake2b_1 = require("thor-devkit/dist/cry/blake2b");
const common_1 = require("./common");
const options_1 = require("./options");
/** class implements Connex.Driver leaves out Vendor related methods */
class DriverNoVendor {
    constructor(net, genesis, initialHead) {
        this.net = net;
        this.genesis = genesis;
        this.headResolvers = [];
        this.int = new promint_1.PromInt();
        this.cache = new cache_1.Cache();
        if (initialHead) {
            this.head = initialHead;
        }
        else {
            this.head = {
                id: genesis.id,
                number: genesis.number,
                timestamp: genesis.timestamp,
                parentID: genesis.parentID,
                txsFeatures: genesis.txsFeatures
            };
        }
        this.headTrackerLoop();
    }
    // close the driver to prevent mem leak
    close() {
        this.int.interrupt();
    }
    // implementations
    pollHead() {
        return this.int.wrap(new Promise(resolve => {
            this.headResolvers.push(() => resolve(this.head));
        }));
    }
    getBlock(revision) {
        return this.cache.getBlock(revision, () => this.httpGet(`blocks/${revision}`));
    }
    getTransaction(id) {
        return this.cache.getTx(id, () => this.httpGet(`transactions/${id}`, { head: this.head.id }));
    }
    getReceipt(id) {
        return this.cache.getReceipt(id, () => this.httpGet(`transactions/${id}/receipt`, { head: this.head.id }));
    }
    getAccount(addr, revision) {
        return this.cache.getAccount(addr, revision, () => this.httpGet(`accounts/${addr}`, { revision }));
    }
    getCode(addr, revision) {
        return this.cache.getTied(`code-${addr}`, revision, () => this.httpGet(`accounts/${addr}/code`, { revision }));
    }
    getStorage(addr, key, revision) {
        return this.cache.getTied(`storage-${addr}-${key}`, revision, () => this.httpGet(`accounts/${addr}/storage/${key}`, { revision }));
    }
    explain(arg, revision, cacheTies) {
        const cacheKey = `explain-${blake2b_1.blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, revision, () => this.httpPost('accounts/*', arg, { revision }), cacheTies);
    }
    filterEventLogs(arg) {
        const cacheKey = `event-${blake2b_1.blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/event', arg));
    }
    filterTransferLogs(arg) {
        const cacheKey = `transfer-${blake2b_1.blake2b256(JSON.stringify(arg)).toString('hex')}`;
        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/transfer', arg));
    }
    signTx(msg, option) {
        throw new Error('not implemented');
    }
    signCert(msg, options) {
        throw new Error(' not implemented');
    }
    isAddressOwned(addr) {
        return Promise.resolve(false);
    }
    //////
    httpGet(path, query) {
        return this.net.http('GET', path, {
            query,
            validateResponseHeader: this.headerValidator
        });
    }
    httpPost(path, body, query) {
        return this.net.http('POST', path, {
            query,
            body,
            validateResponseHeader: this.headerValidator
        });
    }
    get headerValidator() {
        return (headers) => {
            const xgid = headers['x-genesis-id'];
            if (xgid && xgid !== this.genesis.id) {
                throw new Error(`responded 'x-genesis-id' not matched`);
            }
        };
    }
    emitNewHead() {
        const resolvers = this.headResolvers;
        this.headResolvers = [];
        resolvers.forEach(r => r());
    }
    headTrackerLoop() {
        return __awaiter(this, void 0, void 0, function* () {
            let triggerWs = 0;
            for (;;) {
                try {
                    const best = yield this.int.wrap(this.httpGet('blocks/best'));
                    if (best.id !== this.head.id && best.number >= this.head.number) {
                        this.head = {
                            id: best.id,
                            number: best.number,
                            timestamp: best.timestamp,
                            parentID: best.parentID,
                            txsFeatures: best.txsFeatures
                        };
                        this.cache.handleNewBlock(this.head, undefined, best);
                        this.emitNewHead();
                        if (Date.now() - this.head.timestamp * 1000 < 60 * 1000) {
                            // nearly synced
                            triggerWs++;
                        }
                    }
                }
                catch (err) {
                    triggerWs = 0;
                    if (!options_1.options.disableErrorLog) {
                        // tslint:disable-next-line: no-console
                        console.warn('headTracker(http):', err);
                    }
                    if (err instanceof promint_1.InterruptedError) {
                        break;
                    }
                }
                if (triggerWs > 2) {
                    triggerWs = 0;
                    try {
                        yield this.trackWs();
                    }
                    catch (err) {
                        if (!options_1.options.disableErrorLog) {
                            // tslint:disable-next-line: no-console
                            console.warn('headTracker(ws):', err);
                        }
                        if (err instanceof promint_1.InterruptedError) {
                            break;
                        }
                    }
                }
                try {
                    yield this.int.wrap(common_1.sleep(8 * 1000));
                }
                catch (_a) {
                    break;
                }
            }
        });
    }
    trackWs() {
        return __awaiter(this, void 0, void 0, function* () {
            const wsPath = `subscriptions/beat?pos=${this.head.parentID}`;
            const wsr = this.net.openWebSocketReader(wsPath);
            try {
                for (;;) {
                    const data = yield this.int.wrap(wsr.read());
                    const beat = JSON.parse(data);
                    if (!beat.obsolete && beat.id !== this.head.id && beat.number >= this.head.number) {
                        this.head = {
                            id: beat.id,
                            number: beat.number,
                            timestamp: beat.timestamp,
                            parentID: beat.parentID,
                            txsFeatures: beat.txsFeatures
                        };
                        this.cache.handleNewBlock(this.head, { k: beat.k, bits: beat.bloom });
                        this.emitNewHead();
                    }
                }
            }
            finally {
                wsr.close();
            }
        });
    }
}
exports.DriverNoVendor = DriverNoVendor;
//# sourceMappingURL=data:application/json;base64,