import { Payload } from './payload';
/** Transport-independent JSON RPC 2.0 protocol stack */
export declare class JSONRPC {
    private readonly _send;
    private readonly _generateId;
    private readonly _ongoings;
    private _handler?;
    private _error;
    /**
     * create JSON RPC instance
     * @param send the function to transmit JSON RPC payload
     * @param generateId function to generate request id. If omitted, the default  auto-increment function is used.
     */
    constructor(send: JSONRPC.Send, generateId?: () => (number | string));
    /**
     * Call to remote method
     * @param method the method name
     * @param params params for method
     * @returns promised method return value
     */
    call(method: string, ...params: any[]): Promise<any>;
    /**
     * Send a notification
     * @param method the notification name
     * @param params params for notification
     */
    notify(method: string, ...params: any[]): Promise<void>;
    /**
     * to receive and process JSON RPC payload
     * @param data JSON encoded payload
     * @param isRequest whether the payload is request type
     */
    receive(data: string, isRequest: boolean): Promise<void>;
    /**
     * Set to error state, or clear error state.
     * In error state, all subsequent calls will fail immediately.
     * @param err error object
     */
    setError(err: Error | null): void;
    /**
     * serve method handler
     * @param handler handle method calls
     */
    serve(handler: JSONRPC.Handler): void;
    private _handleRequest;
    private _handleResponse;
}
declare const errorClass: ErrorConstructor;
export declare namespace JSONRPC {
    type Send = (data: string, isRequest: boolean) => Promise<void>;
    type MethodImpl = (...args: any[]) => any;
    type Handler = (method: string) => (MethodImpl | undefined);
    class Error extends errorClass {
        readonly code: number;
        readonly data?: any;
        static parseError(reason: string): Error;
        static invalidRequest(reason: string): Error;
        static methodNotFound(): Error;
        static invalidParams(reason: string): Error;
        static internalError(reason: string): Error;
        static serverError(reason: string, code: number, data?: any): Error;
        constructor(message: string, code: number, data?: any);
        asPayload(id?: number | string | null): Payload;
    }
}
export {};
