"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const payload_1 = require("./payload");
/** Transport-independent JSON RPC 2.0 protocol stack */
class JSONRPC {
    /**
     * create JSON RPC instance
     * @param send the function to transmit JSON RPC payload
     * @param generateId function to generate request id. If omitted, the default  auto-increment function is used.
     */
    constructor(send, generateId) {
        this._ongoings = new Map();
        this._error = null;
        this._send = (payload, isRequest) => {
            if (this._error) {
                return Promise.reject(this._error);
            }
            return send(JSON.stringify(payload), isRequest);
        };
        if (generateId) {
            this._generateId = generateId;
        }
        else {
            let nextId = 0;
            this._generateId = () => {
                return nextId++;
            };
        }
    }
    /**
     * Call to remote method
     * @param method the method name
     * @param params params for method
     * @returns promised method return value
     */
    call(method, ...params) {
        const id = this._generateId();
        const payload = {
            jsonrpc: '2.0',
            id,
            method,
            params
        };
        return new Promise((resolve, reject) => {
            // send request payload, and then add to ongoing list to wait for response
            this._send(payload, true)
                .then(() => {
                this._ongoings.set(id, {
                    resolve,
                    reject
                });
            }).catch(reject);
        });
    }
    /**
     * Send a notification
     * @param method the notification name
     * @param params params for notification
     */
    notify(method, ...params) {
        const payload = {
            jsonrpc: '2.0',
            method,
            params
        };
        return this._send(payload, true);
    }
    /**
     * to receive and process JSON RPC payload
     * @param data JSON encoded payload
     * @param isRequest whether the payload is request type
     */
    receive(data, isRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            let payload;
            try {
                payload = JSON.parse(data);
            }
            catch (err) {
                throw JSONRPC.Error.parseError(err.message);
            }
            try {
                payload_1.Payload.validate(payload, isRequest);
            }
            catch (err) {
                throw JSONRPC.Error.invalidRequest(err.message);
            }
            if (isRequest) {
                yield this._handleRequest(payload);
            }
            else {
                this._handleResponse(payload);
            }
        });
    }
    /**
     * Set to error state, or clear error state.
     * In error state, all subsequent calls will fail immediately.
     * @param err error object
     */
    setError(err) {
        this._error = err;
        if (err) {
            const values = Array.from(this._ongoings.values());
            this._ongoings.clear();
            values.forEach(v => v.reject(err));
        }
    }
    /**
     * serve method handler
     * @param handler handle method calls
     */
    serve(handler) {
        this._handler = handler;
    }
    _handleRequest(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const impl = this._handler ? this._handler(payload.method) : undefined;
            const hasId = payload.id !== undefined && payload.id !== null;
            if (impl) {
                let result;
                try {
                    result = yield impl(...payload.params);
                }
                catch (err) {
                    if (!hasId) {
                        throw err;
                    }
                    if (err instanceof JSONRPC.Error) {
                        yield this._send(err.asPayload(payload.id), false);
                    }
                    else {
                        yield this._send(JSONRPC.Error.internalError(err.message).asPayload(payload.id), false);
                    }
                    return;
                }
                if (hasId) {
                    yield this._send({
                        jsonrpc: '2.0',
                        id: payload.id,
                        result
                    }, false);
                }
            }
            else {
                const err = JSONRPC.Error.methodNotFound();
                if (hasId) {
                    yield this._send(err.asPayload(payload.id), false);
                }
                else {
                    throw err;
                }
            }
        });
    }
    _handleResponse(payload) {
        const ongoing = this._ongoings.get(payload.id);
        if (!ongoing) {
            return;
        }
        this._ongoings.delete(payload.id);
        if (payload.error) {
            ongoing.reject(new JSONRPC.Error(payload.error.message, payload.error.code, payload.error.data));
        }
        else {
            ongoing.resolve(payload.result);
        }
    }
}
exports.JSONRPC = JSONRPC;
const errorClass = Error;
(function (JSONRPC) {
    class Error extends errorClass {
        constructor(message, code, data) {
            super(message);
            this.code = code;
            this.data = data;
        }
        static parseError(reason) {
            return new Error(`Parse error: ${reason}`, -32700);
        }
        static invalidRequest(reason) {
            return new Error(`Invalid request: ${reason}`, -32600);
        }
        static methodNotFound() {
            return new Error('Method not found', -32601);
        }
        static invalidParams(reason) {
            return new Error(`Invalid params: ${reason}`, -32602);
        }
        static internalError(reason) {
            return new Error(`Internal error: ${reason}`, -32603);
        }
        static serverError(reason, code, data) {
            return new Error(`Server error: ${reason}`, code, data);
        }
        asPayload(id) {
            return {
                jsonrpc: '2.0',
                id,
                error: {
                    code: this.code,
                    message: this.message,
                    data: this.data
                }
            };
        }
    }
    JSONRPC.Error = Error;
})(JSONRPC = exports.JSONRPC || (exports.JSONRPC = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBbUM7QUFFbkMsd0RBQXdEO0FBQ3hELE1BQWEsT0FBTztJQVVoQjs7OztPQUlHO0lBQ0gsWUFBWSxJQUFrQixFQUFFLFVBQW9DO1FBWm5ELGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFHaEMsQ0FBQTtRQUVJLFdBQU0sR0FBaUIsSUFBSSxDQUFBO1FBUS9CLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDckM7WUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ25ELENBQUMsQ0FBQTtRQUNELElBQUksVUFBVSxFQUFFO1lBQ1osSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUE7U0FDaEM7YUFBTTtZQUNILElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQTtZQUNkLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxFQUFFO2dCQUNwQixPQUFPLE1BQU0sRUFBRSxDQUFBO1lBQ25CLENBQUMsQ0FBQTtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksSUFBSSxDQUFDLE1BQWMsRUFBRSxHQUFHLE1BQWE7UUFDeEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzdCLE1BQU0sT0FBTyxHQUFZO1lBQ3JCLE9BQU8sRUFBRSxLQUFLO1lBQ2QsRUFBRTtZQUNGLE1BQU07WUFDTixNQUFNO1NBQ1QsQ0FBQTtRQUVELE9BQU8sSUFBSSxPQUFPLENBQU0sQ0FBQyxPQUFPLEVBQUUsTUFB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