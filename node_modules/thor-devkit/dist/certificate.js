"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const address_1 = require("./cry/address");
const blake2b_1 = require("./cry/blake2b");
const secp256k1_1 = require("./cry/secp256k1");
const fastJsonStableStringify = require('fast-json-stable-stringify');
var Certificate;
(function (Certificate) {
    function safeToLowerCase(str) {
        return typeof str === 'string' ? str.toLowerCase() : str;
    }
    /**
     * deterministically encode cert into JSON
     * @param cert cert object
     */
    function encode(cert) {
        return fastJsonStableStringify(Object.assign(Object.assign({}, cert), { signer: safeToLowerCase(cert.signer), signature: cert.signature ? safeToLowerCase(cert.signature) : cert.signature }));
    }
    Certificate.encode = encode;
    /**
     * verify the cert
     * @param cert cert object with signature
     */
    function verify(cert) {
        if (!cert.signature) {
            throw new Error('signature missing');
        }
        const signature = cert.signature;
        if (!/^0x[0-9a-f]+$/i.test(signature) || signature.length % 2 !== 0) {
            throw new Error('invalid signature');
        }
        const encoded = encode(Object.assign(Object.assign({}, cert), { signature: undefined }));
        const signingHash = blake2b_1.blake2b256(encoded);
        const pubKey = secp256k1_1.secp256k1.recover(signingHash, Buffer.from(signature.slice(2), 'hex'));
        if ('0x' + address_1.publicKeyToAddress(pubKey).toString('hex') !== safeToLowerCase(cert.signer)) {
            throw new Error('signature does not match with signer');
        }
    }
    Certificate.verify = verify;
})(Certificate = exports.Certificate || (exports.Certificate = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2VydGlmaWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Q7QUFDbEQsMkNBQTBDO0FBQzFDLCtDQUEyQztBQUUzQyxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0FBbUJyRSxJQUFpQixXQUFXLENBc0MzQjtBQXRDRCxXQUFpQixXQUFXO0lBQ3hCLFNBQVMsZUFBZSxDQUFDLEdBQVc7UUFDaEMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0lBQzVELENBQUM7SUFDRDs7O09BR0c7SUFDSCxTQUFnQixNQUFNLENBQUMsSUFBaUI7UUFDcEMsT0FBTyx1QkFBdUIsaUNBQ3ZCLElBQUksS0FDUCxNQUFNLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDcEMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQ3BFLENBQUE7SUFDaEIsQ0FBQztJQU5lLGtCQUFNLFNBTXJCLENBQUE7SUFFRDs7O09BR0c7SUFDSCxTQUFnQixNQUFNLENBQUMsSUFBaUI7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ3ZDO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDdkM7UUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLGlDQUFNLElBQUksS0FBRSxTQUFTLEVBQUUsU0FBUyxJQUFHLENBQUE7UUFDekQsTUFBTSxXQUFXLEdBQUcsb0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUV2QyxNQUFNLE1BQU0sR0FBRyxxQkFBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFFckYsSUFBSSxJQUFJLEdBQUcsNEJBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO1NBQzFEO0lBQ0wsQ0FBQztJQWpCZSxrQkFBTSxTQWlCckIsQ0FBQTtBQUNMLENBQUMsRUF0Q2dCLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBc0MzQiJ9